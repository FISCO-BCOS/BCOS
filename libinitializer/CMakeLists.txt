file(GLOB SRC_LIST "*.cpp")

find_package(Boost CONFIG REQUIRED program_options)
find_package(OpenSSL REQUIRED)
find_package(tarscpp CONFIG REQUIRED)
find_package(jsoncpp CONFIG REQUIRED)

set(PROTOCOL_INIT_LIB protocol_init)
set(FRONTSERVICE_INIT_LIB front_init)
set(PBFT_INIT_LIB pbft_init)
set(TXPOOL_INIT_LIB txpool_init)
set(INIT_LIB init)

add_library(${PROTOCOL_INIT_LIB} ProtocolInitializer.cpp)
target_compile_options(${PROTOCOL_INIT_LIB} PRIVATE -Wno-error -Wno-unused-parameter -Wno-variadic-macros -Wno-return-type -Wno-pedantic)
target_link_libraries(${PROTOCOL_INIT_LIB} Boost::program_options OpenSSL::SSL OpenSSL::Crypto 
                     ${CRYPTO_TARGET} ${TOOL_TARGET} ${TARS_PROTOCOL_TARGET} tarscpp::tarsservant tarscpp::tarsutil)

add_library(${FRONTSERVICE_INIT_LIB} FrontServiceInitializer.cpp)
# target_compile_options(${FRONTSERVICE_INIT_LIB} PRIVATE -Wno-error -Wno-unused-parameter -Wno-variadic-macros -Wno-return-type -Wno-pedantic)
target_link_libraries(${FRONTSERVICE_INIT_LIB} PUBLIC ${PROTOCOL_INIT_LIB} ${TOOL_TARGET} ${FRONT_TARGET})

add_library(${PBFT_INIT_LIB} PBFTInitializer.cpp)
target_compile_options(${PBFT_INIT_LIB} PRIVATE -Wno-error -Wno-unused-parameter -Wno-variadic-macros -Wno-return-type -Wno-pedantic)
target_link_libraries(${PBFT_INIT_LIB} PUBLIC ${PROTOCOL_INIT_LIB}  ${TOOL_TARGET} ${LEDGER_TARGET} ${SEALER_TARGET} ${PBFT_TARGET} ${SYNC_TARGET})

add_library(${TXPOOL_INIT_LIB} TxPoolInitializer.cpp)
# target_compile_options(${TXPOOL_INIT_LIB} PRIVATE -Wno-error -Wno-unused-parameter -Wno-variadic-macros -Wno-return-type -Wno-pedantic)
target_link_libraries(${TXPOOL_INIT_LIB} PUBLIC ${PROTOCOL_INIT_LIB} ${TOOL_TARGET} ${TXPOOL_TARGET})

add_library(${INIT_LIB} ${SRC_LIST})
target_compile_options(${INIT_LIB} PRIVATE -Wno-error -Wno-unused-parameter -Wno-variadic-macros -Wno-return-type -Wno-pedantic)
target_link_libraries(${INIT_LIB} PUBLIC ${PROTOCOL_INIT_LIB}  ${TOOL_TARGET} 
${FRONTSERVICE_INIT_LIB} ${PBFT_INIT_LIB} ${TXPOOL_INIT_LIB} ${STORAGE_TARGET} ${LEDGER_TARGET} ${SCHEDULER_TARGET} ${EXECUTOR_TARGET})