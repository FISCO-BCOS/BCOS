// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace com {
namespace webank {
namespace wedpr {
namespace asset_hiding {
namespace proto {
class CreditCredential;
class CreditCredentialDefaultTypeInternal;
extern CreditCredentialDefaultTypeInternal _CreditCredential_default_instance_;
class CreditSecret;
class CreditSecretDefaultTypeInternal;
extern CreditSecretDefaultTypeInternal _CreditSecret_default_instance_;
class CreditStorage;
class CreditStorageDefaultTypeInternal;
extern CreditStorageDefaultTypeInternal _CreditStorage_default_instance_;
class CreditValue;
class CreditValueDefaultTypeInternal;
extern CreditValueDefaultTypeInternal _CreditValue_default_instance_;
class HiddenCredit;
class HiddenCreditDefaultTypeInternal;
extern HiddenCreditDefaultTypeInternal _HiddenCredit_default_instance_;
class RawCreditSecret;
class RawCreditSecretDefaultTypeInternal;
extern RawCreditSecretDefaultTypeInternal _RawCreditSecret_default_instance_;
class RegulationInfo;
class RegulationInfoDefaultTypeInternal;
extern RegulationInfoDefaultTypeInternal _RegulationInfo_default_instance_;
class SignatureInfo;
class SignatureInfoDefaultTypeInternal;
extern SignatureInfoDefaultTypeInternal _SignatureInfo_default_instance_;
class TransactionInfo;
class TransactionInfoDefaultTypeInternal;
extern TransactionInfoDefaultTypeInternal _TransactionInfo_default_instance_;
}  // namespace proto
}  // namespace asset_hiding
}  // namespace wedpr
}  // namespace webank
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::webank::wedpr::asset_hiding::proto::CreditCredential* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditCredential>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::CreditSecret* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditSecret>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::CreditStorage* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::CreditValue* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditValue>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::HiddenCredit>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::RawCreditSecret* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::RawCreditSecret>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::RegulationInfo* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::RegulationInfo>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::SignatureInfo>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::TransactionInfo* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::TransactionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace webank {
namespace wedpr {
namespace asset_hiding {
namespace proto {

// ===================================================================

class HiddenCredit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.HiddenCredit) */ {
 public:
  HiddenCredit();
  virtual ~HiddenCredit();

  HiddenCredit(const HiddenCredit& from);
  HiddenCredit(HiddenCredit&& from) noexcept
    : HiddenCredit() {
    *this = ::std::move(from);
  }

  inline HiddenCredit& operator=(const HiddenCredit& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenCredit& operator=(HiddenCredit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HiddenCredit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HiddenCredit* internal_default_instance() {
    return reinterpret_cast<const HiddenCredit*>(
               &_HiddenCredit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HiddenCredit& a, HiddenCredit& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenCredit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenCredit* New() const final {
    return CreateMaybeMessage<HiddenCredit>(nullptr);
  }

  HiddenCredit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenCredit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenCredit& from);
  void MergeFrom(const HiddenCredit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenCredit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.HiddenCredit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentFieldNumber = 1,
    kCommitmentUuidFieldNumber = 2,
  };
  // string commitment = 1;
  void clear_commitment();
  const std::string& commitment() const;
  void set_commitment(const std::string& value);
  void set_commitment(std::string&& value);
  void set_commitment(const char* value);
  void set_commitment(const char* value, size_t size);
  std::string* mutable_commitment();
  std::string* release_commitment();
  void set_allocated_commitment(std::string* commitment);

  // string commitment_uuid = 2;
  void clear_commitment_uuid();
  const std::string& commitment_uuid() const;
  void set_commitment_uuid(const std::string& value);
  void set_commitment_uuid(std::string&& value);
  void set_commitment_uuid(const char* value);
  void set_commitment_uuid(const char* value, size_t size);
  std::string* mutable_commitment_uuid();
  std::string* release_commitment_uuid();
  void set_allocated_commitment_uuid(std::string* commitment_uuid);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.HiddenCredit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitment_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreditStorage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.CreditStorage) */ {
 public:
  CreditStorage();
  virtual ~CreditStorage();

  CreditStorage(const CreditStorage& from);
  CreditStorage(CreditStorage&& from) noexcept
    : CreditStorage() {
    *this = ::std::move(from);
  }

  inline CreditStorage& operator=(const CreditStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditStorage& operator=(CreditStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditStorage* internal_default_instance() {
    return reinterpret_cast<const CreditStorage*>(
               &_CreditStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreditStorage& a, CreditStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditStorage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditStorage* New() const final {
    return CreateMaybeMessage<CreditStorage>(nullptr);
  }

  CreditStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditStorage& from);
  void MergeFrom(const CreditStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.CreditStorage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kSignatureInfoFieldNumber = 1,
    kCurrentCreditFieldNumber = 3,
    kRootCreditFieldNumber = 4,
  };
  // string timestamp = 2;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);

  // .com.webank.wedpr.asset_hiding.proto.SignatureInfo signature_info = 1;
  bool has_signature_info() const;
  void clear_signature_info();
  const ::com::webank::wedpr::asset_hiding::proto::SignatureInfo& signature_info() const;
  ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* release_signature_info();
  ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* mutable_signature_info();
  void set_allocated_signature_info(::com::webank::wedpr::asset_hiding::proto::SignatureInfo* signature_info);

  // .com.webank.wedpr.asset_hiding.proto.HiddenCredit current_credit = 3;
  bool has_current_credit() const;
  void clear_current_credit();
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& current_credit() const;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* release_current_credit();
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* mutable_current_credit();
  void set_allocated_current_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* current_credit);

  // .com.webank.wedpr.asset_hiding.proto.HiddenCredit root_credit = 4;
  bool has_root_credit() const;
  void clear_root_credit();
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& root_credit() const;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* release_root_credit();
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* mutable_root_credit();
  void set_allocated_root_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* root_credit);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.CreditStorage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* signature_info_;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* current_credit_;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* root_credit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreditValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.CreditValue) */ {
 public:
  CreditValue();
  virtual ~CreditValue();

  CreditValue(const CreditValue& from);
  CreditValue(CreditValue&& from) noexcept
    : CreditValue() {
    *this = ::std::move(from);
  }

  inline CreditValue& operator=(const CreditValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditValue& operator=(CreditValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditValue& default_instance();

  enum CreditValueCase {
    kNumericalValue = 1,
    kStringValue = 2,
    CREDIT_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditValue* internal_default_instance() {
    return reinterpret_cast<const CreditValue*>(
               &_CreditValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreditValue& a, CreditValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditValue* New() const final {
    return CreateMaybeMessage<CreditValue>(nullptr);
  }

  CreditValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditValue& from);
  void MergeFrom(const CreditValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.CreditValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumericalValueFieldNumber = 1,
    kStringValueFieldNumber = 2,
  };
  // int64 numerical_value = 1;
  private:
  bool has_numerical_value() const;
  public:
  void clear_numerical_value();
  ::PROTOBUF_NAMESPACE_ID::int64 numerical_value() const;
  void set_numerical_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // string string_value = 2;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);

  void clear_credit_value();
  CreditValueCase credit_value_case() const;
  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.CreditValue)
 private:
  class _Internal;
  void set_has_numerical_value();
  void set_has_string_value();

  inline bool has_credit_value() const;
  inline void clear_has_credit_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union CreditValueUnion {
    CreditValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 numerical_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  } credit_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreditSecret :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.CreditSecret) */ {
 public:
  CreditSecret();
  virtual ~CreditSecret();

  CreditSecret(const CreditSecret& from);
  CreditSecret(CreditSecret&& from) noexcept
    : CreditSecret() {
    *this = ::std::move(from);
  }

  inline CreditSecret& operator=(const CreditSecret& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditSecret& operator=(CreditSecret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditSecret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditSecret* internal_default_instance() {
    return reinterpret_cast<const CreditSecret*>(
               &_CreditSecret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreditSecret& a, CreditSecret& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditSecret* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditSecret* New() const final {
    return CreateMaybeMessage<CreditSecret>(nullptr);
  }

  CreditSecret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditSecret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditSecret& from);
  void MergeFrom(const CreditSecret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditSecret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.CreditSecret";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretFieldNumber = 2,
    kCreditValueFieldNumber = 1,
  };
  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);

  // .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 1;
  bool has_credit_value() const;
  void clear_credit_value();
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue& credit_value() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* release_credit_value();
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* mutable_credit_value();
  void set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.CreditSecret)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreditCredential :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.CreditCredential) */ {
 public:
  CreditCredential();
  virtual ~CreditCredential();

  CreditCredential(const CreditCredential& from);
  CreditCredential(CreditCredential&& from) noexcept
    : CreditCredential() {
    *this = ::std::move(from);
  }

  inline CreditCredential& operator=(const CreditCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditCredential& operator=(CreditCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditCredential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditCredential* internal_default_instance() {
    return reinterpret_cast<const CreditCredential*>(
               &_CreditCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreditCredential& a, CreditCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditCredential* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditCredential* New() const final {
    return CreateMaybeMessage<CreditCredential>(nullptr);
  }

  CreditCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditCredential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditCredential& from);
  void MergeFrom(const CreditCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditCredential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.CreditCredential";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreditStorageFieldNumber = 1,
    kCreditSecretFieldNumber = 2,
  };
  // .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
  bool has_credit_storage() const;
  void clear_credit_storage();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& credit_storage() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_credit_storage();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_credit_storage();
  void set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage);

  // .com.webank.wedpr.asset_hiding.proto.CreditSecret credit_secret = 2;
  bool has_credit_secret() const;
  void clear_credit_secret();
  const ::com::webank::wedpr::asset_hiding::proto::CreditSecret& credit_secret() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* release_credit_secret();
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* mutable_credit_secret();
  void set_allocated_credit_secret(::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.CreditCredential)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage_;
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SignatureInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.SignatureInfo) */ {
 public:
  SignatureInfo();
  virtual ~SignatureInfo();

  SignatureInfo(const SignatureInfo& from);
  SignatureInfo(SignatureInfo&& from) noexcept
    : SignatureInfo() {
    *this = ::std::move(from);
  }

  inline SignatureInfo& operator=(const SignatureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureInfo& operator=(SignatureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureInfo* internal_default_instance() {
    return reinterpret_cast<const SignatureInfo*>(
               &_SignatureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SignatureInfo& a, SignatureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureInfo* New() const final {
    return CreateMaybeMessage<SignatureInfo>(nullptr);
  }

  SignatureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureInfo& from);
  void MergeFrom(const SignatureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.SignatureInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.SignatureInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TransactionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.TransactionInfo) */ {
 public:
  TransactionInfo();
  virtual ~TransactionInfo();

  TransactionInfo(const TransactionInfo& from);
  TransactionInfo(TransactionInfo&& from) noexcept
    : TransactionInfo() {
    *this = ::std::move(from);
  }

  inline TransactionInfo& operator=(const TransactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInfo& operator=(TransactionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionInfo* internal_default_instance() {
    return reinterpret_cast<const TransactionInfo*>(
               &_TransactionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransactionInfo& a, TransactionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInfo* New() const final {
    return CreateMaybeMessage<TransactionInfo>(nullptr);
  }

  TransactionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInfo& from);
  void MergeFrom(const TransactionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.TransactionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionMessageFieldNumber = 2,
    kCreditValueFieldNumber = 1,
  };
  // string transaction_message = 2;
  void clear_transaction_message();
  const std::string& transaction_message() const;
  void set_transaction_message(const std::string& value);
  void set_transaction_message(std::string&& value);
  void set_transaction_message(const char* value);
  void set_transaction_message(const char* value, size_t size);
  std::string* mutable_transaction_message();
  std::string* release_transaction_message();
  void set_allocated_transaction_message(std::string* transaction_message);

  // .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 1;
  bool has_credit_value() const;
  void clear_credit_value();
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue& credit_value() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* release_credit_value();
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* mutable_credit_value();
  void set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.TransactionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_message_;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RegulationInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.RegulationInfo) */ {
 public:
  RegulationInfo();
  virtual ~RegulationInfo();

  RegulationInfo(const RegulationInfo& from);
  RegulationInfo(RegulationInfo&& from) noexcept
    : RegulationInfo() {
    *this = ::std::move(from);
  }

  inline RegulationInfo& operator=(const RegulationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulationInfo& operator=(RegulationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegulationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegulationInfo* internal_default_instance() {
    return reinterpret_cast<const RegulationInfo*>(
               &_RegulationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegulationInfo& a, RegulationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegulationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegulationInfo* New() const final {
    return CreateMaybeMessage<RegulationInfo>(nullptr);
  }

  RegulationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegulationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegulationInfo& from);
  void MergeFrom(const RegulationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegulationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.RegulationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionInfoFieldNumber = 1,
    kCreditCredentialFieldNumber = 2,
  };
  // repeated .com.webank.wedpr.asset_hiding.proto.TransactionInfo transaction_info = 1;
  int transaction_info_size() const;
  void clear_transaction_info();
  ::com::webank::wedpr::asset_hiding::proto::TransactionInfo* mutable_transaction_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransactionInfo >*
      mutable_transaction_info();
  const ::com::webank::wedpr::asset_hiding::proto::TransactionInfo& transaction_info(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::TransactionInfo* add_transaction_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransactionInfo >&
      transaction_info() const;

  // repeated .com.webank.wedpr.asset_hiding.proto.CreditCredential credit_credential = 2;
  int credit_credential_size() const;
  void clear_credit_credential();
  ::com::webank::wedpr::asset_hiding::proto::CreditCredential* mutable_credit_credential(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditCredential >*
      mutable_credit_credential();
  const ::com::webank::wedpr::asset_hiding::proto::CreditCredential& credit_credential(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::CreditCredential* add_credit_credential();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditCredential >&
      credit_credential() const;

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.RegulationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransactionInfo > transaction_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditCredential > credit_credential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RawCreditSecret :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.RawCreditSecret) */ {
 public:
  RawCreditSecret();
  virtual ~RawCreditSecret();

  RawCreditSecret(const RawCreditSecret& from);
  RawCreditSecret(RawCreditSecret&& from) noexcept
    : RawCreditSecret() {
    *this = ::std::move(from);
  }

  inline RawCreditSecret& operator=(const RawCreditSecret& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawCreditSecret& operator=(RawCreditSecret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawCreditSecret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawCreditSecret* internal_default_instance() {
    return reinterpret_cast<const RawCreditSecret*>(
               &_RawCreditSecret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RawCreditSecret& a, RawCreditSecret& b) {
    a.Swap(&b);
  }
  inline void Swap(RawCreditSecret* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawCreditSecret* New() const final {
    return CreateMaybeMessage<RawCreditSecret>(nullptr);
  }

  RawCreditSecret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawCreditSecret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawCreditSecret& from);
  void MergeFrom(const RawCreditSecret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawCreditSecret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.RawCreditSecret";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretUuidFieldNumber = 2,
    kCreditSecretFieldNumber = 1,
  };
  // string secret_uuid = 2;
  void clear_secret_uuid();
  const std::string& secret_uuid() const;
  void set_secret_uuid(const std::string& value);
  void set_secret_uuid(std::string&& value);
  void set_secret_uuid(const char* value);
  void set_secret_uuid(const char* value, size_t size);
  std::string* mutable_secret_uuid();
  std::string* release_secret_uuid();
  void set_allocated_secret_uuid(std::string* secret_uuid);

  // .com.webank.wedpr.asset_hiding.proto.CreditSecret credit_secret = 1;
  bool has_credit_secret() const;
  void clear_credit_secret();
  const ::com::webank::wedpr::asset_hiding::proto::CreditSecret& credit_secret() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* release_credit_secret();
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* mutable_credit_secret();
  void set_allocated_credit_secret(::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.RawCreditSecret)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_uuid_;
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HiddenCredit

// string commitment = 1;
inline void HiddenCredit::clear_commitment() {
  commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HiddenCredit::commitment() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
  return commitment_.GetNoArena();
}
inline void HiddenCredit::set_commitment(const std::string& value) {
  
  commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
}
inline void HiddenCredit::set_commitment(std::string&& value) {
  
  commitment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
}
inline void HiddenCredit::set_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
}
inline void HiddenCredit::set_commitment(const char* value, size_t size) {
  
  commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
}
inline std::string* HiddenCredit::mutable_commitment() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
  return commitment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HiddenCredit::release_commitment() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
  
  return commitment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HiddenCredit::set_allocated_commitment(std::string* commitment) {
  if (commitment != nullptr) {
    
  } else {
    
  }
  commitment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitment);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment)
}

// string commitment_uuid = 2;
inline void HiddenCredit::clear_commitment_uuid() {
  commitment_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HiddenCredit::commitment_uuid() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
  return commitment_uuid_.GetNoArena();
}
inline void HiddenCredit::set_commitment_uuid(const std::string& value) {
  
  commitment_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
}
inline void HiddenCredit::set_commitment_uuid(std::string&& value) {
  
  commitment_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
}
inline void HiddenCredit::set_commitment_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitment_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
}
inline void HiddenCredit::set_commitment_uuid(const char* value, size_t size) {
  
  commitment_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
}
inline std::string* HiddenCredit::mutable_commitment_uuid() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
  return commitment_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HiddenCredit::release_commitment_uuid() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
  
  return commitment_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HiddenCredit::set_allocated_commitment_uuid(std::string* commitment_uuid) {
  if (commitment_uuid != nullptr) {
    
  } else {
    
  }
  commitment_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitment_uuid);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.HiddenCredit.commitment_uuid)
}

// -------------------------------------------------------------------

// CreditStorage

// .com.webank.wedpr.asset_hiding.proto.SignatureInfo signature_info = 1;
inline bool CreditStorage::has_signature_info() const {
  return this != internal_default_instance() && signature_info_ != nullptr;
}
inline void CreditStorage::clear_signature_info() {
  if (GetArenaNoVirtual() == nullptr && signature_info_ != nullptr) {
    delete signature_info_;
  }
  signature_info_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::SignatureInfo& CreditStorage::signature_info() const {
  const ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* p = signature_info_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditStorage.signature_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::SignatureInfo*>(
      &::com::webank::wedpr::asset_hiding::proto::_SignatureInfo_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* CreditStorage::release_signature_info() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditStorage.signature_info)
  
  ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* temp = signature_info_;
  signature_info_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::SignatureInfo* CreditStorage::mutable_signature_info() {
  
  if (signature_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::SignatureInfo>(GetArenaNoVirtual());
    signature_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditStorage.signature_info)
  return signature_info_;
}
inline void CreditStorage::set_allocated_signature_info(::com::webank::wedpr::asset_hiding::proto::SignatureInfo* signature_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_info_;
  }
  if (signature_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature_info, submessage_arena);
    }
    
  } else {
    
  }
  signature_info_ = signature_info;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditStorage.signature_info)
}

// string timestamp = 2;
inline void CreditStorage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreditStorage::timestamp() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
  return timestamp_.GetNoArena();
}
inline void CreditStorage::set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
}
inline void CreditStorage::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
}
inline void CreditStorage::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
}
inline void CreditStorage::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
}
inline std::string* CreditStorage::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreditStorage::release_timestamp() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreditStorage::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditStorage.timestamp)
}

// .com.webank.wedpr.asset_hiding.proto.HiddenCredit current_credit = 3;
inline bool CreditStorage::has_current_credit() const {
  return this != internal_default_instance() && current_credit_ != nullptr;
}
inline void CreditStorage::clear_current_credit() {
  if (GetArenaNoVirtual() == nullptr && current_credit_ != nullptr) {
    delete current_credit_;
  }
  current_credit_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& CreditStorage::current_credit() const {
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* p = current_credit_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditStorage.current_credit)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit*>(
      &::com::webank::wedpr::asset_hiding::proto::_HiddenCredit_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* CreditStorage::release_current_credit() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditStorage.current_credit)
  
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* temp = current_credit_;
  current_credit_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* CreditStorage::mutable_current_credit() {
  
  if (current_credit_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::HiddenCredit>(GetArenaNoVirtual());
    current_credit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditStorage.current_credit)
  return current_credit_;
}
inline void CreditStorage::set_allocated_current_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* current_credit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_credit_;
  }
  if (current_credit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_credit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_credit, submessage_arena);
    }
    
  } else {
    
  }
  current_credit_ = current_credit;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditStorage.current_credit)
}

// .com.webank.wedpr.asset_hiding.proto.HiddenCredit root_credit = 4;
inline bool CreditStorage::has_root_credit() const {
  return this != internal_default_instance() && root_credit_ != nullptr;
}
inline void CreditStorage::clear_root_credit() {
  if (GetArenaNoVirtual() == nullptr && root_credit_ != nullptr) {
    delete root_credit_;
  }
  root_credit_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& CreditStorage::root_credit() const {
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* p = root_credit_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditStorage.root_credit)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit*>(
      &::com::webank::wedpr::asset_hiding::proto::_HiddenCredit_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* CreditStorage::release_root_credit() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditStorage.root_credit)
  
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* temp = root_credit_;
  root_credit_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* CreditStorage::mutable_root_credit() {
  
  if (root_credit_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::HiddenCredit>(GetArenaNoVirtual());
    root_credit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditStorage.root_credit)
  return root_credit_;
}
inline void CreditStorage::set_allocated_root_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* root_credit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_credit_;
  }
  if (root_credit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root_credit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_credit, submessage_arena);
    }
    
  } else {
    
  }
  root_credit_ = root_credit;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditStorage.root_credit)
}

// -------------------------------------------------------------------

// CreditValue

// int64 numerical_value = 1;
inline bool CreditValue::has_numerical_value() const {
  return credit_value_case() == kNumericalValue;
}
inline void CreditValue::set_has_numerical_value() {
  _oneof_case_[0] = kNumericalValue;
}
inline void CreditValue::clear_numerical_value() {
  if (has_numerical_value()) {
    credit_value_.numerical_value_ = PROTOBUF_LONGLONG(0);
    clear_has_credit_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreditValue::numerical_value() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditValue.numerical_value)
  if (has_numerical_value()) {
    return credit_value_.numerical_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void CreditValue::set_numerical_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_numerical_value()) {
    clear_credit_value();
    set_has_numerical_value();
  }
  credit_value_.numerical_value_ = value;
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditValue.numerical_value)
}

// string string_value = 2;
inline bool CreditValue::has_string_value() const {
  return credit_value_case() == kStringValue;
}
inline void CreditValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void CreditValue::clear_string_value() {
  if (has_string_value()) {
    credit_value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_credit_value();
  }
}
inline const std::string& CreditValue::string_value() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
  if (has_string_value()) {
    return credit_value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreditValue::set_string_value(const std::string& value) {
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
  if (!has_string_value()) {
    clear_credit_value();
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  credit_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
}
inline void CreditValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
  if (!has_string_value()) {
    clear_credit_value();
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  credit_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
}
inline void CreditValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_string_value()) {
    clear_credit_value();
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  credit_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
}
inline void CreditValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_credit_value();
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  credit_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
}
inline std::string* CreditValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_credit_value();
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
  return credit_value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreditValue::release_string_value() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
  if (has_string_value()) {
    clear_has_credit_value();
    return credit_value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void CreditValue::set_allocated_string_value(std::string* string_value) {
  if (has_credit_value()) {
    clear_credit_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    credit_value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditValue.string_value)
}

inline bool CreditValue::has_credit_value() const {
  return credit_value_case() != CREDIT_VALUE_NOT_SET;
}
inline void CreditValue::clear_has_credit_value() {
  _oneof_case_[0] = CREDIT_VALUE_NOT_SET;
}
inline CreditValue::CreditValueCase CreditValue::credit_value_case() const {
  return CreditValue::CreditValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreditSecret

// .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 1;
inline bool CreditSecret::has_credit_value() const {
  return this != internal_default_instance() && credit_value_ != nullptr;
}
inline void CreditSecret::clear_credit_value() {
  if (GetArenaNoVirtual() == nullptr && credit_value_ != nullptr) {
    delete credit_value_;
  }
  credit_value_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditValue& CreditSecret::credit_value() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue* p = credit_value_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditSecret.credit_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditValue*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditValue_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* CreditSecret::release_credit_value() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditSecret.credit_value)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* temp = credit_value_;
  credit_value_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* CreditSecret::mutable_credit_value() {
  
  if (credit_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditValue>(GetArenaNoVirtual());
    credit_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditSecret.credit_value)
  return credit_value_;
}
inline void CreditSecret::set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credit_value_;
  }
  if (credit_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_value, submessage_arena);
    }
    
  } else {
    
  }
  credit_value_ = credit_value;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditSecret.credit_value)
}

// string secret = 2;
inline void CreditSecret::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreditSecret::secret() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
  return secret_.GetNoArena();
}
inline void CreditSecret::set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
}
inline void CreditSecret::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
}
inline void CreditSecret::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
}
inline void CreditSecret::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
}
inline std::string* CreditSecret::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreditSecret::release_secret() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreditSecret::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditSecret.secret)
}

// -------------------------------------------------------------------

// CreditCredential

// .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
inline bool CreditCredential::has_credit_storage() const {
  return this != internal_default_instance() && credit_storage_ != nullptr;
}
inline void CreditCredential::clear_credit_storage() {
  if (GetArenaNoVirtual() == nullptr && credit_storage_ != nullptr) {
    delete credit_storage_;
  }
  credit_storage_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& CreditCredential::credit_storage() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = credit_storage_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* CreditCredential::release_credit_storage() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_storage)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = credit_storage_;
  credit_storage_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* CreditCredential::mutable_credit_storage() {
  
  if (credit_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    credit_storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_storage)
  return credit_storage_;
}
inline void CreditCredential::set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credit_storage_;
  }
  if (credit_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_storage, submessage_arena);
    }
    
  } else {
    
  }
  credit_storage_ = credit_storage;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_storage)
}

// .com.webank.wedpr.asset_hiding.proto.CreditSecret credit_secret = 2;
inline bool CreditCredential::has_credit_secret() const {
  return this != internal_default_instance() && credit_secret_ != nullptr;
}
inline void CreditCredential::clear_credit_secret() {
  if (GetArenaNoVirtual() == nullptr && credit_secret_ != nullptr) {
    delete credit_secret_;
  }
  credit_secret_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditSecret& CreditCredential::credit_secret() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditSecret* p = credit_secret_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_secret)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditSecret*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditSecret_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditSecret* CreditCredential::release_credit_secret() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_secret)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* temp = credit_secret_;
  credit_secret_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditSecret* CreditCredential::mutable_credit_secret() {
  
  if (credit_secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditSecret>(GetArenaNoVirtual());
    credit_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_secret)
  return credit_secret_;
}
inline void CreditCredential::set_allocated_credit_secret(::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credit_secret_;
  }
  if (credit_secret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_secret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_secret, submessage_arena);
    }
    
  } else {
    
  }
  credit_secret_ = credit_secret;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.CreditCredential.credit_secret)
}

// -------------------------------------------------------------------

// SignatureInfo

// string public_key = 1;
inline void SignatureInfo::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignatureInfo::public_key() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
  return public_key_.GetNoArena();
}
inline void SignatureInfo::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
}
inline void SignatureInfo::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
}
inline void SignatureInfo::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
}
inline void SignatureInfo::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
}
inline std::string* SignatureInfo::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignatureInfo::release_public_key() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureInfo::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.SignatureInfo.public_key)
}

// string signature = 2;
inline void SignatureInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignatureInfo::signature() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
  return signature_.GetNoArena();
}
inline void SignatureInfo::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
}
inline void SignatureInfo::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
}
inline void SignatureInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
}
inline void SignatureInfo::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
}
inline std::string* SignatureInfo::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignatureInfo::release_signature() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureInfo::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.SignatureInfo.signature)
}

// -------------------------------------------------------------------

// TransactionInfo

// .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 1;
inline bool TransactionInfo::has_credit_value() const {
  return this != internal_default_instance() && credit_value_ != nullptr;
}
inline void TransactionInfo::clear_credit_value() {
  if (GetArenaNoVirtual() == nullptr && credit_value_ != nullptr) {
    delete credit_value_;
  }
  credit_value_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditValue& TransactionInfo::credit_value() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue* p = credit_value_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransactionInfo.credit_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditValue*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditValue_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* TransactionInfo::release_credit_value() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransactionInfo.credit_value)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* temp = credit_value_;
  credit_value_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* TransactionInfo::mutable_credit_value() {
  
  if (credit_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditValue>(GetArenaNoVirtual());
    credit_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransactionInfo.credit_value)
  return credit_value_;
}
inline void TransactionInfo::set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credit_value_;
  }
  if (credit_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_value, submessage_arena);
    }
    
  } else {
    
  }
  credit_value_ = credit_value;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransactionInfo.credit_value)
}

// string transaction_message = 2;
inline void TransactionInfo::clear_transaction_message() {
  transaction_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo::transaction_message() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
  return transaction_message_.GetNoArena();
}
inline void TransactionInfo::set_transaction_message(const std::string& value) {
  
  transaction_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
}
inline void TransactionInfo::set_transaction_message(std::string&& value) {
  
  transaction_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
}
inline void TransactionInfo::set_transaction_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
}
inline void TransactionInfo::set_transaction_message(const char* value, size_t size) {
  
  transaction_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
}
inline std::string* TransactionInfo::mutable_transaction_message() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
  return transaction_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo::release_transaction_message() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
  
  return transaction_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo::set_allocated_transaction_message(std::string* transaction_message) {
  if (transaction_message != nullptr) {
    
  } else {
    
  }
  transaction_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_message);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransactionInfo.transaction_message)
}

// -------------------------------------------------------------------

// RegulationInfo

// repeated .com.webank.wedpr.asset_hiding.proto.TransactionInfo transaction_info = 1;
inline int RegulationInfo::transaction_info_size() const {
  return transaction_info_.size();
}
inline void RegulationInfo::clear_transaction_info() {
  transaction_info_.Clear();
}
inline ::com::webank::wedpr::asset_hiding::proto::TransactionInfo* RegulationInfo::mutable_transaction_info(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.RegulationInfo.transaction_info)
  return transaction_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransactionInfo >*
RegulationInfo::mutable_transaction_info() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.RegulationInfo.transaction_info)
  return &transaction_info_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::TransactionInfo& RegulationInfo::transaction_info(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.RegulationInfo.transaction_info)
  return transaction_info_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::TransactionInfo* RegulationInfo::add_transaction_info() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.RegulationInfo.transaction_info)
  return transaction_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransactionInfo >&
RegulationInfo::transaction_info() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.RegulationInfo.transaction_info)
  return transaction_info_;
}

// repeated .com.webank.wedpr.asset_hiding.proto.CreditCredential credit_credential = 2;
inline int RegulationInfo::credit_credential_size() const {
  return credit_credential_.size();
}
inline void RegulationInfo::clear_credit_credential() {
  credit_credential_.Clear();
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditCredential* RegulationInfo::mutable_credit_credential(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.RegulationInfo.credit_credential)
  return credit_credential_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditCredential >*
RegulationInfo::mutable_credit_credential() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.RegulationInfo.credit_credential)
  return &credit_credential_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditCredential& RegulationInfo::credit_credential(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.RegulationInfo.credit_credential)
  return credit_credential_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditCredential* RegulationInfo::add_credit_credential() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.RegulationInfo.credit_credential)
  return credit_credential_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditCredential >&
RegulationInfo::credit_credential() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.RegulationInfo.credit_credential)
  return credit_credential_;
}

// -------------------------------------------------------------------

// RawCreditSecret

// .com.webank.wedpr.asset_hiding.proto.CreditSecret credit_secret = 1;
inline bool RawCreditSecret::has_credit_secret() const {
  return this != internal_default_instance() && credit_secret_ != nullptr;
}
inline void RawCreditSecret::clear_credit_secret() {
  if (GetArenaNoVirtual() == nullptr && credit_secret_ != nullptr) {
    delete credit_secret_;
  }
  credit_secret_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditSecret& RawCreditSecret::credit_secret() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditSecret* p = credit_secret_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.credit_secret)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditSecret*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditSecret_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditSecret* RawCreditSecret::release_credit_secret() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.credit_secret)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditSecret* temp = credit_secret_;
  credit_secret_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditSecret* RawCreditSecret::mutable_credit_secret() {
  
  if (credit_secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditSecret>(GetArenaNoVirtual());
    credit_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.credit_secret)
  return credit_secret_;
}
inline void RawCreditSecret::set_allocated_credit_secret(::com::webank::wedpr::asset_hiding::proto::CreditSecret* credit_secret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credit_secret_;
  }
  if (credit_secret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_secret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_secret, submessage_arena);
    }
    
  } else {
    
  }
  credit_secret_ = credit_secret;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.credit_secret)
}

// string secret_uuid = 2;
inline void RawCreditSecret::clear_secret_uuid() {
  secret_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RawCreditSecret::secret_uuid() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
  return secret_uuid_.GetNoArena();
}
inline void RawCreditSecret::set_secret_uuid(const std::string& value) {
  
  secret_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
}
inline void RawCreditSecret::set_secret_uuid(std::string&& value) {
  
  secret_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
}
inline void RawCreditSecret::set_secret_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
}
inline void RawCreditSecret::set_secret_uuid(const char* value, size_t size) {
  
  secret_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
}
inline std::string* RawCreditSecret::mutable_secret_uuid() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
  return secret_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RawCreditSecret::release_secret_uuid() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
  
  return secret_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RawCreditSecret::set_allocated_secret_uuid(std::string* secret_uuid) {
  if (secret_uuid != nullptr) {
    
  } else {
    
  }
  secret_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_uuid);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.RawCreditSecret.secret_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace asset_hiding
}  // namespace wedpr
}  // namespace webank
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
