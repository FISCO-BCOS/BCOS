// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace com {
namespace webank {
namespace wedpr {
namespace asset_hiding {
namespace proto {
class FulfillArgument;
class FulfillArgumentDefaultTypeInternal;
extern FulfillArgumentDefaultTypeInternal _FulfillArgument_default_instance_;
class FulfillRequest;
class FulfillRequestDefaultTypeInternal;
extern FulfillRequestDefaultTypeInternal _FulfillRequest_default_instance_;
class IssueArgument;
class IssueArgumentDefaultTypeInternal;
extern IssueArgumentDefaultTypeInternal _IssueArgument_default_instance_;
class IssueRequest;
class IssueRequestDefaultTypeInternal;
extern IssueRequestDefaultTypeInternal _IssueRequest_default_instance_;
class SplitArgument;
class SplitArgumentDefaultTypeInternal;
extern SplitArgumentDefaultTypeInternal _SplitArgument_default_instance_;
class SplitRequest;
class SplitRequestDefaultTypeInternal;
extern SplitRequestDefaultTypeInternal _SplitRequest_default_instance_;
class TransferArgument;
class TransferArgumentDefaultTypeInternal;
extern TransferArgumentDefaultTypeInternal _TransferArgument_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
}  // namespace proto
}  // namespace asset_hiding
}  // namespace wedpr
}  // namespace webank
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::webank::wedpr::asset_hiding::proto::FulfillArgument* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::FulfillArgument>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::FulfillRequest* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::FulfillRequest>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::IssueArgument* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::IssueArgument>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::IssueRequest* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::IssueRequest>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::SplitArgument* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::SplitArgument>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::SplitRequest* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::SplitRequest>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::TransferArgument* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::TransferArgument>(Arena*);
template<> ::com::webank::wedpr::asset_hiding::proto::TransferRequest* Arena::CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::TransferRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace webank {
namespace wedpr {
namespace asset_hiding {
namespace proto {

// ===================================================================

class IssueArgument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.IssueArgument) */ {
 public:
  IssueArgument();
  virtual ~IssueArgument();

  IssueArgument(const IssueArgument& from);
  IssueArgument(IssueArgument&& from) noexcept
    : IssueArgument() {
    *this = ::std::move(from);
  }

  inline IssueArgument& operator=(const IssueArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssueArgument& operator=(IssueArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IssueArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueArgument* internal_default_instance() {
    return reinterpret_cast<const IssueArgument*>(
               &_IssueArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IssueArgument& a, IssueArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(IssueArgument* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IssueArgument* New() const final {
    return CreateMaybeMessage<IssueArgument>(nullptr);
  }

  IssueArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IssueArgument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IssueArgument& from);
  void MergeFrom(const IssueArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueArgument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.IssueArgument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRGFieldNumber = 2,
    kCreditStorageFieldNumber = 1,
    kCreditValueFieldNumber = 3,
  };
  // string r_g = 2;
  void clear_r_g();
  const std::string& r_g() const;
  void set_r_g(const std::string& value);
  void set_r_g(std::string&& value);
  void set_r_g(const char* value);
  void set_r_g(const char* value, size_t size);
  std::string* mutable_r_g();
  std::string* release_r_g();
  void set_allocated_r_g(std::string* r_g);

  // .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
  bool has_credit_storage() const;
  void clear_credit_storage();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& credit_storage() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_credit_storage();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_credit_storage();
  void set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage);

  // .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 3;
  bool has_credit_value() const;
  void clear_credit_value();
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue& credit_value() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* release_credit_value();
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* mutable_credit_value();
  void set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.IssueArgument)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_g_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage_;
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class IssueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.IssueRequest) */ {
 public:
  IssueRequest();
  virtual ~IssueRequest();

  IssueRequest(const IssueRequest& from);
  IssueRequest(IssueRequest&& from) noexcept
    : IssueRequest() {
    *this = ::std::move(from);
  }

  inline IssueRequest& operator=(const IssueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssueRequest& operator=(IssueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IssueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueRequest* internal_default_instance() {
    return reinterpret_cast<const IssueRequest*>(
               &_IssueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IssueRequest& a, IssueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IssueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IssueRequest* New() const final {
    return CreateMaybeMessage<IssueRequest>(nullptr);
  }

  IssueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IssueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IssueRequest& from);
  void MergeFrom(const IssueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.IssueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreditStorageFieldNumber = 1,
  };
  // .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
  bool has_credit_storage() const;
  void clear_credit_storage();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& credit_storage() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_credit_storage();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_credit_storage();
  void set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.IssueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class FulfillArgument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.FulfillArgument) */ {
 public:
  FulfillArgument();
  virtual ~FulfillArgument();

  FulfillArgument(const FulfillArgument& from);
  FulfillArgument(FulfillArgument&& from) noexcept
    : FulfillArgument() {
    *this = ::std::move(from);
  }

  inline FulfillArgument& operator=(const FulfillArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline FulfillArgument& operator=(FulfillArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FulfillArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FulfillArgument* internal_default_instance() {
    return reinterpret_cast<const FulfillArgument*>(
               &_FulfillArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FulfillArgument& a, FulfillArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(FulfillArgument* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FulfillArgument* New() const final {
    return CreateMaybeMessage<FulfillArgument>(nullptr);
  }

  FulfillArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FulfillArgument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FulfillArgument& from);
  void MergeFrom(const FulfillArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FulfillArgument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.FulfillArgument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeProofFieldNumber = 2,
    kCreditStorageFieldNumber = 1,
  };
  // string knowledge_proof = 2;
  void clear_knowledge_proof();
  const std::string& knowledge_proof() const;
  void set_knowledge_proof(const std::string& value);
  void set_knowledge_proof(std::string&& value);
  void set_knowledge_proof(const char* value);
  void set_knowledge_proof(const char* value, size_t size);
  std::string* mutable_knowledge_proof();
  std::string* release_knowledge_proof();
  void set_allocated_knowledge_proof(std::string* knowledge_proof);

  // .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
  bool has_credit_storage() const;
  void clear_credit_storage();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& credit_storage() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_credit_storage();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_credit_storage();
  void set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.FulfillArgument)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_proof_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class FulfillRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.FulfillRequest) */ {
 public:
  FulfillRequest();
  virtual ~FulfillRequest();

  FulfillRequest(const FulfillRequest& from);
  FulfillRequest(FulfillRequest&& from) noexcept
    : FulfillRequest() {
    *this = ::std::move(from);
  }

  inline FulfillRequest& operator=(const FulfillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FulfillRequest& operator=(FulfillRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FulfillRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FulfillRequest* internal_default_instance() {
    return reinterpret_cast<const FulfillRequest*>(
               &_FulfillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FulfillRequest& a, FulfillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FulfillRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FulfillRequest* New() const final {
    return CreateMaybeMessage<FulfillRequest>(nullptr);
  }

  FulfillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FulfillRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FulfillRequest& from);
  void MergeFrom(const FulfillRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FulfillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.FulfillRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeProofFieldNumber = 2,
    kCreditStorageFieldNumber = 1,
  };
  // string knowledge_proof = 2;
  void clear_knowledge_proof();
  const std::string& knowledge_proof() const;
  void set_knowledge_proof(const std::string& value);
  void set_knowledge_proof(std::string&& value);
  void set_knowledge_proof(const char* value);
  void set_knowledge_proof(const char* value, size_t size);
  std::string* mutable_knowledge_proof();
  std::string* release_knowledge_proof();
  void set_allocated_knowledge_proof(std::string* knowledge_proof);

  // .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
  bool has_credit_storage() const;
  void clear_credit_storage();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& credit_storage() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_credit_storage();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_credit_storage();
  void set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.FulfillRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_proof_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TransferArgument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.TransferArgument) */ {
 public:
  TransferArgument();
  virtual ~TransferArgument();

  TransferArgument(const TransferArgument& from);
  TransferArgument(TransferArgument&& from) noexcept
    : TransferArgument() {
    *this = ::std::move(from);
  }

  inline TransferArgument& operator=(const TransferArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferArgument& operator=(TransferArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferArgument* internal_default_instance() {
    return reinterpret_cast<const TransferArgument*>(
               &_TransferArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransferArgument& a, TransferArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferArgument* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferArgument* New() const final {
    return CreateMaybeMessage<TransferArgument>(nullptr);
  }

  TransferArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferArgument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferArgument& from);
  void MergeFrom(const TransferArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferArgument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.TransferArgument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKGFieldNumber = 1,
    kRGFieldNumber = 2,
    kDFieldNumber = 3,
    kSFieldNumber = 4,
    kVDFieldNumber = 5,
    kRangeProofFieldNumber = 6,
    kKnowledgeProofFieldNumber = 7,
    kHiddenCreditFieldNumber = 8,
  };
  // string k_g = 1;
  void clear_k_g();
  const std::string& k_g() const;
  void set_k_g(const std::string& value);
  void set_k_g(std::string&& value);
  void set_k_g(const char* value);
  void set_k_g(const char* value, size_t size);
  std::string* mutable_k_g();
  std::string* release_k_g();
  void set_allocated_k_g(std::string* k_g);

  // string r_g = 2;
  void clear_r_g();
  const std::string& r_g() const;
  void set_r_g(const std::string& value);
  void set_r_g(std::string&& value);
  void set_r_g(const char* value);
  void set_r_g(const char* value, size_t size);
  std::string* mutable_r_g();
  std::string* release_r_g();
  void set_allocated_r_g(std::string* r_g);

  // string d = 3;
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const char* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);

  // string s = 4;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);

  // string v_d = 5;
  void clear_v_d();
  const std::string& v_d() const;
  void set_v_d(const std::string& value);
  void set_v_d(std::string&& value);
  void set_v_d(const char* value);
  void set_v_d(const char* value, size_t size);
  std::string* mutable_v_d();
  std::string* release_v_d();
  void set_allocated_v_d(std::string* v_d);

  // string range_proof = 6;
  void clear_range_proof();
  const std::string& range_proof() const;
  void set_range_proof(const std::string& value);
  void set_range_proof(std::string&& value);
  void set_range_proof(const char* value);
  void set_range_proof(const char* value, size_t size);
  std::string* mutable_range_proof();
  std::string* release_range_proof();
  void set_allocated_range_proof(std::string* range_proof);

  // string knowledge_proof = 7;
  void clear_knowledge_proof();
  const std::string& knowledge_proof() const;
  void set_knowledge_proof(const std::string& value);
  void set_knowledge_proof(std::string&& value);
  void set_knowledge_proof(const char* value);
  void set_knowledge_proof(const char* value, size_t size);
  std::string* mutable_knowledge_proof();
  std::string* release_knowledge_proof();
  void set_allocated_knowledge_proof(std::string* knowledge_proof);

  // .com.webank.wedpr.asset_hiding.proto.HiddenCredit hidden_credit = 8;
  bool has_hidden_credit() const;
  void clear_hidden_credit();
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& hidden_credit() const;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* release_hidden_credit();
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* mutable_hidden_credit();
  void set_allocated_hidden_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* hidden_credit);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.TransferArgument)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_proof_;
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* hidden_credit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SplitArgument :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.SplitArgument) */ {
 public:
  SplitArgument();
  virtual ~SplitArgument();

  SplitArgument(const SplitArgument& from);
  SplitArgument(SplitArgument&& from) noexcept
    : SplitArgument() {
    *this = ::std::move(from);
  }

  inline SplitArgument& operator=(const SplitArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitArgument& operator=(SplitArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitArgument* internal_default_instance() {
    return reinterpret_cast<const SplitArgument*>(
               &_SplitArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SplitArgument& a, SplitArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitArgument* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitArgument* New() const final {
    return CreateMaybeMessage<SplitArgument>(nullptr);
  }

  SplitArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitArgument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitArgument& from);
  void MergeFrom(const SplitArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitArgument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.SplitArgument";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kMessageHashFieldNumber = 3,
  };
  // repeated .com.webank.wedpr.asset_hiding.proto.TransferArgument sender = 1;
  int sender_size() const;
  void clear_sender();
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* mutable_sender(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >*
      mutable_sender();
  const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& sender(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* add_sender();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >&
      sender() const;

  // repeated .com.webank.wedpr.asset_hiding.proto.TransferArgument receiver = 2;
  int receiver_size() const;
  void clear_receiver();
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* mutable_receiver(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >*
      mutable_receiver();
  const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& receiver(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* add_receiver();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >&
      receiver() const;

  // string message_hash = 3;
  void clear_message_hash();
  const std::string& message_hash() const;
  void set_message_hash(const std::string& value);
  void set_message_hash(std::string&& value);
  void set_message_hash(const char* value);
  void set_message_hash(const char* value, size_t size);
  std::string* mutable_message_hash();
  std::string* release_message_hash();
  void set_allocated_message_hash(std::string* message_hash);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.SplitArgument)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument > sender_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument > receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.TransferRequest) */ {
 public:
  TransferRequest();
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.TransferRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageHashFieldNumber = 4,
    kSpentCreditFieldNumber = 1,
    kNewCreditFieldNumber = 2,
    kArgumentFieldNumber = 3,
  };
  // string message_hash = 4;
  void clear_message_hash();
  const std::string& message_hash() const;
  void set_message_hash(const std::string& value);
  void set_message_hash(std::string&& value);
  void set_message_hash(const char* value);
  void set_message_hash(const char* value, size_t size);
  std::string* mutable_message_hash();
  std::string* release_message_hash();
  void set_allocated_message_hash(std::string* message_hash);

  // .com.webank.wedpr.asset_hiding.proto.CreditStorage spent_credit = 1;
  bool has_spent_credit() const;
  void clear_spent_credit();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& spent_credit() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_spent_credit();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_spent_credit();
  void set_allocated_spent_credit(::com::webank::wedpr::asset_hiding::proto::CreditStorage* spent_credit);

  // .com.webank.wedpr.asset_hiding.proto.CreditStorage new_credit = 2;
  bool has_new_credit() const;
  void clear_new_credit();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& new_credit() const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* release_new_credit();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_new_credit();
  void set_allocated_new_credit(::com::webank::wedpr::asset_hiding::proto::CreditStorage* new_credit);

  // .com.webank.wedpr.asset_hiding.proto.TransferArgument argument = 3;
  bool has_argument() const;
  void clear_argument();
  const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& argument() const;
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* release_argument();
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* mutable_argument();
  void set_allocated_argument(::com::webank::wedpr::asset_hiding::proto::TransferArgument* argument);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.TransferRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_hash_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* spent_credit_;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* new_credit_;
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* argument_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SplitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.webank.wedpr.asset_hiding.proto.SplitRequest) */ {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);
  SplitRequest(SplitRequest&& from) noexcept
    : SplitRequest() {
    *this = ::std::move(from);
  }

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitRequest& operator=(SplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitRequest* internal_default_instance() {
    return reinterpret_cast<const SplitRequest*>(
               &_SplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SplitRequest& a, SplitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitRequest* New() const final {
    return CreateMaybeMessage<SplitRequest>(nullptr);
  }

  SplitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.webank.wedpr.asset_hiding.proto.SplitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpentCreditFieldNumber = 1,
    kNewCreditFieldNumber = 2,
    kArgumentFieldNumber = 3,
  };
  // repeated .com.webank.wedpr.asset_hiding.proto.CreditStorage spent_credit = 1;
  int spent_credit_size() const;
  void clear_spent_credit();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_spent_credit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >*
      mutable_spent_credit();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& spent_credit(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* add_spent_credit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >&
      spent_credit() const;

  // repeated .com.webank.wedpr.asset_hiding.proto.CreditStorage new_credit = 2;
  int new_credit_size() const;
  void clear_new_credit();
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* mutable_new_credit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >*
      mutable_new_credit();
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& new_credit(int index) const;
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* add_new_credit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >&
      new_credit() const;

  // .com.webank.wedpr.asset_hiding.proto.SplitArgument argument = 3;
  bool has_argument() const;
  void clear_argument();
  const ::com::webank::wedpr::asset_hiding::proto::SplitArgument& argument() const;
  ::com::webank::wedpr::asset_hiding::proto::SplitArgument* release_argument();
  ::com::webank::wedpr::asset_hiding::proto::SplitArgument* mutable_argument();
  void set_allocated_argument(::com::webank::wedpr::asset_hiding::proto::SplitArgument* argument);

  // @@protoc_insertion_point(class_scope:com.webank.wedpr.asset_hiding.proto.SplitRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage > spent_credit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage > new_credit_;
  ::com::webank::wedpr::asset_hiding::proto::SplitArgument* argument_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IssueArgument

// .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
inline bool IssueArgument::has_credit_storage() const {
  return this != internal_default_instance() && credit_storage_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& IssueArgument::credit_storage() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = credit_storage_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* IssueArgument::release_credit_storage() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_storage)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = credit_storage_;
  credit_storage_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* IssueArgument::mutable_credit_storage() {
  
  if (credit_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    credit_storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_storage)
  return credit_storage_;
}
inline void IssueArgument::set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_storage_);
  }
  if (credit_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_storage, submessage_arena);
    }
    
  } else {
    
  }
  credit_storage_ = credit_storage;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_storage)
}

// string r_g = 2;
inline void IssueArgument::clear_r_g() {
  r_g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IssueArgument::r_g() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
  return r_g_.GetNoArena();
}
inline void IssueArgument::set_r_g(const std::string& value) {
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
}
inline void IssueArgument::set_r_g(std::string&& value) {
  
  r_g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
}
inline void IssueArgument::set_r_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
}
inline void IssueArgument::set_r_g(const char* value, size_t size) {
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
}
inline std::string* IssueArgument::mutable_r_g() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
  return r_g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IssueArgument::release_r_g() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
  
  return r_g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IssueArgument::set_allocated_r_g(std::string* r_g) {
  if (r_g != nullptr) {
    
  } else {
    
  }
  r_g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_g);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.IssueArgument.r_g)
}

// .com.webank.wedpr.asset_hiding.proto.CreditValue credit_value = 3;
inline bool IssueArgument::has_credit_value() const {
  return this != internal_default_instance() && credit_value_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditValue& IssueArgument::credit_value() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditValue* p = credit_value_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditValue*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditValue_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* IssueArgument::release_credit_value() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_value)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditValue* temp = credit_value_;
  credit_value_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditValue* IssueArgument::mutable_credit_value() {
  
  if (credit_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditValue>(GetArenaNoVirtual());
    credit_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_value)
  return credit_value_;
}
inline void IssueArgument::set_allocated_credit_value(::com::webank::wedpr::asset_hiding::proto::CreditValue* credit_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_value_);
  }
  if (credit_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_value, submessage_arena);
    }
    
  } else {
    
  }
  credit_value_ = credit_value;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.IssueArgument.credit_value)
}

// -------------------------------------------------------------------

// IssueRequest

// .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
inline bool IssueRequest::has_credit_storage() const {
  return this != internal_default_instance() && credit_storage_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& IssueRequest::credit_storage() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = credit_storage_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.IssueRequest.credit_storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* IssueRequest::release_credit_storage() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.IssueRequest.credit_storage)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = credit_storage_;
  credit_storage_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* IssueRequest::mutable_credit_storage() {
  
  if (credit_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    credit_storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.IssueRequest.credit_storage)
  return credit_storage_;
}
inline void IssueRequest::set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_storage_);
  }
  if (credit_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_storage, submessage_arena);
    }
    
  } else {
    
  }
  credit_storage_ = credit_storage;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.IssueRequest.credit_storage)
}

// -------------------------------------------------------------------

// FulfillArgument

// .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
inline bool FulfillArgument::has_credit_storage() const {
  return this != internal_default_instance() && credit_storage_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& FulfillArgument::credit_storage() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = credit_storage_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.FulfillArgument.credit_storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* FulfillArgument::release_credit_storage() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.FulfillArgument.credit_storage)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = credit_storage_;
  credit_storage_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* FulfillArgument::mutable_credit_storage() {
  
  if (credit_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    credit_storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.FulfillArgument.credit_storage)
  return credit_storage_;
}
inline void FulfillArgument::set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_storage_);
  }
  if (credit_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_storage, submessage_arena);
    }
    
  } else {
    
  }
  credit_storage_ = credit_storage;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.FulfillArgument.credit_storage)
}

// string knowledge_proof = 2;
inline void FulfillArgument::clear_knowledge_proof() {
  knowledge_proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FulfillArgument::knowledge_proof() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
  return knowledge_proof_.GetNoArena();
}
inline void FulfillArgument::set_knowledge_proof(const std::string& value) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
}
inline void FulfillArgument::set_knowledge_proof(std::string&& value) {
  
  knowledge_proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
}
inline void FulfillArgument::set_knowledge_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
}
inline void FulfillArgument::set_knowledge_proof(const char* value, size_t size) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
}
inline std::string* FulfillArgument::mutable_knowledge_proof() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
  return knowledge_proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FulfillArgument::release_knowledge_proof() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
  
  return knowledge_proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FulfillArgument::set_allocated_knowledge_proof(std::string* knowledge_proof) {
  if (knowledge_proof != nullptr) {
    
  } else {
    
  }
  knowledge_proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_proof);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.FulfillArgument.knowledge_proof)
}

// -------------------------------------------------------------------

// FulfillRequest

// .com.webank.wedpr.asset_hiding.proto.CreditStorage credit_storage = 1;
inline bool FulfillRequest::has_credit_storage() const {
  return this != internal_default_instance() && credit_storage_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& FulfillRequest::credit_storage() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = credit_storage_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.FulfillRequest.credit_storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* FulfillRequest::release_credit_storage() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.FulfillRequest.credit_storage)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = credit_storage_;
  credit_storage_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* FulfillRequest::mutable_credit_storage() {
  
  if (credit_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    credit_storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.FulfillRequest.credit_storage)
  return credit_storage_;
}
inline void FulfillRequest::set_allocated_credit_storage(::com::webank::wedpr::asset_hiding::proto::CreditStorage* credit_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_storage_);
  }
  if (credit_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credit_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_storage, submessage_arena);
    }
    
  } else {
    
  }
  credit_storage_ = credit_storage;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.FulfillRequest.credit_storage)
}

// string knowledge_proof = 2;
inline void FulfillRequest::clear_knowledge_proof() {
  knowledge_proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FulfillRequest::knowledge_proof() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
  return knowledge_proof_.GetNoArena();
}
inline void FulfillRequest::set_knowledge_proof(const std::string& value) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
}
inline void FulfillRequest::set_knowledge_proof(std::string&& value) {
  
  knowledge_proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
}
inline void FulfillRequest::set_knowledge_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
}
inline void FulfillRequest::set_knowledge_proof(const char* value, size_t size) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
}
inline std::string* FulfillRequest::mutable_knowledge_proof() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
  return knowledge_proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FulfillRequest::release_knowledge_proof() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
  
  return knowledge_proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FulfillRequest::set_allocated_knowledge_proof(std::string* knowledge_proof) {
  if (knowledge_proof != nullptr) {
    
  } else {
    
  }
  knowledge_proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_proof);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.FulfillRequest.knowledge_proof)
}

// -------------------------------------------------------------------

// TransferArgument

// string k_g = 1;
inline void TransferArgument::clear_k_g() {
  k_g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::k_g() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
  return k_g_.GetNoArena();
}
inline void TransferArgument::set_k_g(const std::string& value) {
  
  k_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
}
inline void TransferArgument::set_k_g(std::string&& value) {
  
  k_g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
}
inline void TransferArgument::set_k_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
}
inline void TransferArgument::set_k_g(const char* value, size_t size) {
  
  k_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
}
inline std::string* TransferArgument::mutable_k_g() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
  return k_g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_k_g() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
  
  return k_g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_k_g(std::string* k_g) {
  if (k_g != nullptr) {
    
  } else {
    
  }
  k_g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k_g);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.k_g)
}

// string r_g = 2;
inline void TransferArgument::clear_r_g() {
  r_g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::r_g() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
  return r_g_.GetNoArena();
}
inline void TransferArgument::set_r_g(const std::string& value) {
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
}
inline void TransferArgument::set_r_g(std::string&& value) {
  
  r_g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
}
inline void TransferArgument::set_r_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
}
inline void TransferArgument::set_r_g(const char* value, size_t size) {
  
  r_g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
}
inline std::string* TransferArgument::mutable_r_g() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
  return r_g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_r_g() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
  
  return r_g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_r_g(std::string* r_g) {
  if (r_g != nullptr) {
    
  } else {
    
  }
  r_g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_g);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.r_g)
}

// string d = 3;
inline void TransferArgument::clear_d() {
  d_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::d() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
  return d_.GetNoArena();
}
inline void TransferArgument::set_d(const std::string& value) {
  
  d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
}
inline void TransferArgument::set_d(std::string&& value) {
  
  d_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
}
inline void TransferArgument::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
}
inline void TransferArgument::set_d(const char* value, size_t size) {
  
  d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
}
inline std::string* TransferArgument::mutable_d() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
  return d_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_d() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
  
  return d_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.d)
}

// string s = 4;
inline void TransferArgument::clear_s() {
  s_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::s() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
  return s_.GetNoArena();
}
inline void TransferArgument::set_s(const std::string& value) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
}
inline void TransferArgument::set_s(std::string&& value) {
  
  s_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
}
inline void TransferArgument::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
}
inline void TransferArgument::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
}
inline std::string* TransferArgument::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
  return s_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_s() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
  
  return s_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.s)
}

// string v_d = 5;
inline void TransferArgument::clear_v_d() {
  v_d_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::v_d() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
  return v_d_.GetNoArena();
}
inline void TransferArgument::set_v_d(const std::string& value) {
  
  v_d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
}
inline void TransferArgument::set_v_d(std::string&& value) {
  
  v_d_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
}
inline void TransferArgument::set_v_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
}
inline void TransferArgument::set_v_d(const char* value, size_t size) {
  
  v_d_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
}
inline std::string* TransferArgument::mutable_v_d() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
  return v_d_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_v_d() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
  
  return v_d_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_v_d(std::string* v_d) {
  if (v_d != nullptr) {
    
  } else {
    
  }
  v_d_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_d);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.v_d)
}

// string range_proof = 6;
inline void TransferArgument::clear_range_proof() {
  range_proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::range_proof() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
  return range_proof_.GetNoArena();
}
inline void TransferArgument::set_range_proof(const std::string& value) {
  
  range_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
}
inline void TransferArgument::set_range_proof(std::string&& value) {
  
  range_proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
}
inline void TransferArgument::set_range_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
}
inline void TransferArgument::set_range_proof(const char* value, size_t size) {
  
  range_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
}
inline std::string* TransferArgument::mutable_range_proof() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
  return range_proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_range_proof() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
  
  return range_proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_range_proof(std::string* range_proof) {
  if (range_proof != nullptr) {
    
  } else {
    
  }
  range_proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_proof);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.range_proof)
}

// string knowledge_proof = 7;
inline void TransferArgument::clear_knowledge_proof() {
  knowledge_proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferArgument::knowledge_proof() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
  return knowledge_proof_.GetNoArena();
}
inline void TransferArgument::set_knowledge_proof(const std::string& value) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
}
inline void TransferArgument::set_knowledge_proof(std::string&& value) {
  
  knowledge_proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
}
inline void TransferArgument::set_knowledge_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
}
inline void TransferArgument::set_knowledge_proof(const char* value, size_t size) {
  
  knowledge_proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
}
inline std::string* TransferArgument::mutable_knowledge_proof() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
  return knowledge_proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferArgument::release_knowledge_proof() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
  
  return knowledge_proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferArgument::set_allocated_knowledge_proof(std::string* knowledge_proof) {
  if (knowledge_proof != nullptr) {
    
  } else {
    
  }
  knowledge_proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_proof);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.knowledge_proof)
}

// .com.webank.wedpr.asset_hiding.proto.HiddenCredit hidden_credit = 8;
inline bool TransferArgument::has_hidden_credit() const {
  return this != internal_default_instance() && hidden_credit_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit& TransferArgument::hidden_credit() const {
  const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* p = hidden_credit_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferArgument.hidden_credit)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::HiddenCredit*>(
      &::com::webank::wedpr::asset_hiding::proto::_HiddenCredit_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* TransferArgument::release_hidden_credit() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferArgument.hidden_credit)
  
  ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* temp = hidden_credit_;
  hidden_credit_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::HiddenCredit* TransferArgument::mutable_hidden_credit() {
  
  if (hidden_credit_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::HiddenCredit>(GetArenaNoVirtual());
    hidden_credit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferArgument.hidden_credit)
  return hidden_credit_;
}
inline void TransferArgument::set_allocated_hidden_credit(::com::webank::wedpr::asset_hiding::proto::HiddenCredit* hidden_credit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_credit_);
  }
  if (hidden_credit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hidden_credit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_credit, submessage_arena);
    }
    
  } else {
    
  }
  hidden_credit_ = hidden_credit;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferArgument.hidden_credit)
}

// -------------------------------------------------------------------

// SplitArgument

// repeated .com.webank.wedpr.asset_hiding.proto.TransferArgument sender = 1;
inline int SplitArgument::sender_size() const {
  return sender_.size();
}
inline void SplitArgument::clear_sender() {
  sender_.Clear();
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* SplitArgument::mutable_sender(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitArgument.sender)
  return sender_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >*
SplitArgument::mutable_sender() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.SplitArgument.sender)
  return &sender_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& SplitArgument::sender(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitArgument.sender)
  return sender_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* SplitArgument::add_sender() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.SplitArgument.sender)
  return sender_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >&
SplitArgument::sender() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.SplitArgument.sender)
  return sender_;
}

// repeated .com.webank.wedpr.asset_hiding.proto.TransferArgument receiver = 2;
inline int SplitArgument::receiver_size() const {
  return receiver_.size();
}
inline void SplitArgument::clear_receiver() {
  receiver_.Clear();
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* SplitArgument::mutable_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitArgument.receiver)
  return receiver_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >*
SplitArgument::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.SplitArgument.receiver)
  return &receiver_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& SplitArgument::receiver(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitArgument.receiver)
  return receiver_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* SplitArgument::add_receiver() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.SplitArgument.receiver)
  return receiver_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::TransferArgument >&
SplitArgument::receiver() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.SplitArgument.receiver)
  return receiver_;
}

// string message_hash = 3;
inline void SplitArgument::clear_message_hash() {
  message_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SplitArgument::message_hash() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
  return message_hash_.GetNoArena();
}
inline void SplitArgument::set_message_hash(const std::string& value) {
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
}
inline void SplitArgument::set_message_hash(std::string&& value) {
  
  message_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
}
inline void SplitArgument::set_message_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
}
inline void SplitArgument::set_message_hash(const char* value, size_t size) {
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
}
inline std::string* SplitArgument::mutable_message_hash() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
  return message_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SplitArgument::release_message_hash() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
  
  return message_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SplitArgument::set_allocated_message_hash(std::string* message_hash) {
  if (message_hash != nullptr) {
    
  } else {
    
  }
  message_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_hash);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.SplitArgument.message_hash)
}

// -------------------------------------------------------------------

// TransferRequest

// .com.webank.wedpr.asset_hiding.proto.CreditStorage spent_credit = 1;
inline bool TransferRequest::has_spent_credit() const {
  return this != internal_default_instance() && spent_credit_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& TransferRequest::spent_credit() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = spent_credit_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferRequest.spent_credit)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* TransferRequest::release_spent_credit() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferRequest.spent_credit)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = spent_credit_;
  spent_credit_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* TransferRequest::mutable_spent_credit() {
  
  if (spent_credit_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    spent_credit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferRequest.spent_credit)
  return spent_credit_;
}
inline void TransferRequest::set_allocated_spent_credit(::com::webank::wedpr::asset_hiding::proto::CreditStorage* spent_credit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spent_credit_);
  }
  if (spent_credit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spent_credit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spent_credit, submessage_arena);
    }
    
  } else {
    
  }
  spent_credit_ = spent_credit;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferRequest.spent_credit)
}

// .com.webank.wedpr.asset_hiding.proto.CreditStorage new_credit = 2;
inline bool TransferRequest::has_new_credit() const {
  return this != internal_default_instance() && new_credit_ != nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& TransferRequest::new_credit() const {
  const ::com::webank::wedpr::asset_hiding::proto::CreditStorage* p = new_credit_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferRequest.new_credit)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::CreditStorage*>(
      &::com::webank::wedpr::asset_hiding::proto::_CreditStorage_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* TransferRequest::release_new_credit() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferRequest.new_credit)
  
  ::com::webank::wedpr::asset_hiding::proto::CreditStorage* temp = new_credit_;
  new_credit_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* TransferRequest::mutable_new_credit() {
  
  if (new_credit_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::CreditStorage>(GetArenaNoVirtual());
    new_credit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferRequest.new_credit)
  return new_credit_;
}
inline void TransferRequest::set_allocated_new_credit(::com::webank::wedpr::asset_hiding::proto::CreditStorage* new_credit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_credit_);
  }
  if (new_credit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_credit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_credit, submessage_arena);
    }
    
  } else {
    
  }
  new_credit_ = new_credit;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferRequest.new_credit)
}

// .com.webank.wedpr.asset_hiding.proto.TransferArgument argument = 3;
inline bool TransferRequest::has_argument() const {
  return this != internal_default_instance() && argument_ != nullptr;
}
inline void TransferRequest::clear_argument() {
  if (GetArenaNoVirtual() == nullptr && argument_ != nullptr) {
    delete argument_;
  }
  argument_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::TransferArgument& TransferRequest::argument() const {
  const ::com::webank::wedpr::asset_hiding::proto::TransferArgument* p = argument_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferRequest.argument)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::TransferArgument*>(
      &::com::webank::wedpr::asset_hiding::proto::_TransferArgument_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* TransferRequest::release_argument() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferRequest.argument)
  
  ::com::webank::wedpr::asset_hiding::proto::TransferArgument* temp = argument_;
  argument_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::TransferArgument* TransferRequest::mutable_argument() {
  
  if (argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::TransferArgument>(GetArenaNoVirtual());
    argument_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferRequest.argument)
  return argument_;
}
inline void TransferRequest::set_allocated_argument(::com::webank::wedpr::asset_hiding::proto::TransferArgument* argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete argument_;
  }
  if (argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argument, submessage_arena);
    }
    
  } else {
    
  }
  argument_ = argument;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferRequest.argument)
}

// string message_hash = 4;
inline void TransferRequest::clear_message_hash() {
  message_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferRequest::message_hash() const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
  return message_hash_.GetNoArena();
}
inline void TransferRequest::set_message_hash(const std::string& value) {
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
}
inline void TransferRequest::set_message_hash(std::string&& value) {
  
  message_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
}
inline void TransferRequest::set_message_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
}
inline void TransferRequest::set_message_hash(const char* value, size_t size) {
  
  message_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
}
inline std::string* TransferRequest::mutable_message_hash() {
  
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
  return message_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferRequest::release_message_hash() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
  
  return message_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRequest::set_allocated_message_hash(std::string* message_hash) {
  if (message_hash != nullptr) {
    
  } else {
    
  }
  message_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_hash);
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.TransferRequest.message_hash)
}

// -------------------------------------------------------------------

// SplitRequest

// repeated .com.webank.wedpr.asset_hiding.proto.CreditStorage spent_credit = 1;
inline int SplitRequest::spent_credit_size() const {
  return spent_credit_.size();
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* SplitRequest::mutable_spent_credit(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitRequest.spent_credit)
  return spent_credit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >*
SplitRequest::mutable_spent_credit() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.SplitRequest.spent_credit)
  return &spent_credit_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& SplitRequest::spent_credit(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitRequest.spent_credit)
  return spent_credit_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* SplitRequest::add_spent_credit() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.SplitRequest.spent_credit)
  return spent_credit_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >&
SplitRequest::spent_credit() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.SplitRequest.spent_credit)
  return spent_credit_;
}

// repeated .com.webank.wedpr.asset_hiding.proto.CreditStorage new_credit = 2;
inline int SplitRequest::new_credit_size() const {
  return new_credit_.size();
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* SplitRequest::mutable_new_credit(int index) {
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitRequest.new_credit)
  return new_credit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >*
SplitRequest::mutable_new_credit() {
  // @@protoc_insertion_point(field_mutable_list:com.webank.wedpr.asset_hiding.proto.SplitRequest.new_credit)
  return &new_credit_;
}
inline const ::com::webank::wedpr::asset_hiding::proto::CreditStorage& SplitRequest::new_credit(int index) const {
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitRequest.new_credit)
  return new_credit_.Get(index);
}
inline ::com::webank::wedpr::asset_hiding::proto::CreditStorage* SplitRequest::add_new_credit() {
  // @@protoc_insertion_point(field_add:com.webank.wedpr.asset_hiding.proto.SplitRequest.new_credit)
  return new_credit_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::webank::wedpr::asset_hiding::proto::CreditStorage >&
SplitRequest::new_credit() const {
  // @@protoc_insertion_point(field_list:com.webank.wedpr.asset_hiding.proto.SplitRequest.new_credit)
  return new_credit_;
}

// .com.webank.wedpr.asset_hiding.proto.SplitArgument argument = 3;
inline bool SplitRequest::has_argument() const {
  return this != internal_default_instance() && argument_ != nullptr;
}
inline void SplitRequest::clear_argument() {
  if (GetArenaNoVirtual() == nullptr && argument_ != nullptr) {
    delete argument_;
  }
  argument_ = nullptr;
}
inline const ::com::webank::wedpr::asset_hiding::proto::SplitArgument& SplitRequest::argument() const {
  const ::com::webank::wedpr::asset_hiding::proto::SplitArgument* p = argument_;
  // @@protoc_insertion_point(field_get:com.webank.wedpr.asset_hiding.proto.SplitRequest.argument)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::webank::wedpr::asset_hiding::proto::SplitArgument*>(
      &::com::webank::wedpr::asset_hiding::proto::_SplitArgument_default_instance_);
}
inline ::com::webank::wedpr::asset_hiding::proto::SplitArgument* SplitRequest::release_argument() {
  // @@protoc_insertion_point(field_release:com.webank.wedpr.asset_hiding.proto.SplitRequest.argument)
  
  ::com::webank::wedpr::asset_hiding::proto::SplitArgument* temp = argument_;
  argument_ = nullptr;
  return temp;
}
inline ::com::webank::wedpr::asset_hiding::proto::SplitArgument* SplitRequest::mutable_argument() {
  
  if (argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::webank::wedpr::asset_hiding::proto::SplitArgument>(GetArenaNoVirtual());
    argument_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.webank.wedpr.asset_hiding.proto.SplitRequest.argument)
  return argument_;
}
inline void SplitRequest::set_allocated_argument(::com::webank::wedpr::asset_hiding::proto::SplitArgument* argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete argument_;
  }
  if (argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argument, submessage_arena);
    }
    
  } else {
    
  }
  argument_ = argument;
  // @@protoc_insertion_point(field_set_allocated:com.webank.wedpr.asset_hiding.proto.SplitRequest.argument)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace asset_hiding
}  // namespace wedpr
}  // namespace webank
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
